AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template to deploy the Industrial Machine Connectivity Quick Start into an existing VPC. (qs-1qtb0iud5)
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for deploying into an existing VPC"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Edge-deployment configuration
        Parameters:
          - EdgeDeviceID
          - DeploymentType
          - DeploymentOption
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - EC2KeyPairName
          - VpcId
          - GreengrassInstanceType
          - IgnitionInstanceType
          - AZ
          - EC2Subnet
          - PublicSubnet1CIDR
          - AMCDriver
          - SitewiseMonitorEmail
          - UserPublicIP
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
          
    ParameterLabels:
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region
      EC2KeyPairName:
        default: SSH key name
      EdgeDeviceID:
        default: Name for the edge-gateway device 
      DeploymentType:
        default: Type of deployment
      DeploymentOption:
        default: Dataflow option
      VpcId:
        default: Default VPC ID
      GreengrassInstanceType:
        default: Greengrass EC2 instance type
      IgnitionInstanceType:
        default: Ignition EC2 instance type
      EC2Subnet:
        default: VPC subnet ID
      AMCDriver:
        default: Asset Model Converter driver
      UserPublicIP:
        default: Your public IP address  
      PublicSubnet1CIDR:
        default: CIDR block for Ignition/Greengrass access
      SitewiseMonitorEmail:
        default: Email address for the SiteWise portal administrator
      AZ: 
        default: Availability Zone launch selection

Parameters:
  SitewiseMonitorEmail:
    AllowedPattern: ^[a-zA-Z0-9_!#$%&â€™*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$
    ConstraintDescription: Must be a valid email address.
    Description: Enter the email address.
    Type: String
  PublicSubnet1CIDR: 
    Type: String
    Description: You will narrow this down after the stack deploys.
    Default: '0.0.0.0/0'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  UserPublicIP:
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    Description: Enter your public IP for Ignition UI, SSH access to EC2 instances. Format - (x.x.x.x)
  AMCDriver:
    Type: String
    Default: IgnitionCirrusLink
    AllowedValues:
      - IgnitionCirrusLink
      - IgnitionFileExport
      - KepwareFileExport
    Description: The driver that the Asset Model Converter uses to translate hierarchy data. If you're not using the default driver, choose IgnitionFileExport or KepwareFileExport. 
  EdgeDeviceID:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Edge-gateway device name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Type: String
    Default: Virtual
    Description: If your deployment uses a physical edge-gateway device (industrial PC), enter a name. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
  EC2KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
    Default: SiteWiseTest
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: The Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Description: Name of the S3 bucket for your copy of the Quick Start assets. 
      Keep the default name unless you are customizing the template. 
      Changing the name updates code references to point to a new Quick 
      Start location. This name can include numbers, lowercase letters, 
      uppercase letters, and hyphens, but do not start or end with a hyphen (-). 
      See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: The Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Description: S3 key prefix that is used to simulate a directory for your copy of the 
      Quick Start assets. Keep the default prefix unless you are customizing 
      the template. Changing this prefix updates code references to point to 
      a new Quick Start location. This prefix can include numbers, lowercase 
      letters, uppercase letters, hyphens (-), and forward slashes (/). 
      See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html 
      and https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. Keep the default Region unless you are customizing the template. Changing this Region updates code references to point to a new Quick Start location. When using your own bucket, specify the Region. See https://aws-quickstart.github.io/option1.html.
    Type: String
  DeploymentType:
    AllowedValues:
      - Virtual
      - Physical
    ConstraintDescription: Must contain valid deployment type.
    Description: Type of edge deployment. If your deployment uses physical edge hardware, choose "Physical."
    Type: String
    Default: Virtual
  DeploymentOption:
    AllowedValues:
      - Option1
      - Option2a
      - Option2b
    ConstraintDescription: Must be a valid dataflow option. 
    Description: Default dataflow ("Option1") is OPC UA to SiteWise. You can also choose "Option2a" (MQTT to Iot Core) or "Option2b" (MQTT to Greengrass to Iot Core).
    Type: String
    Default: Option1 
  VpcId:
    ConstraintDescription: Must be a valid VPC ID.
    Description: ID of the VPC that the solution will be hosted in.
    Type: String
  GreengrassInstanceType:
    Description: Amazon EC2 instance type for the Greengrass EC2 instances.
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
  IgnitionInstanceType:
    Description: Amazon EC2 instance type for the Ignition EC2 instances.
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.large
      - t3.xlarge
  EC2Subnet:
    ConstraintDescription: Must be a valid subnet ID. 
    Description: Subnet ID where the EC2 instances will be launched. Match the subnet ID with your Availability Zone selection.
    Type: String
  AZ:
    Description: Availability Zone that the EC2 instances will be launched into.
    Type: AWS::EC2::AvailabilityZone::Name

Conditions:
  UsingDefaultBucket: !Equals
    - !Ref QSS3BucketName
    - 'aws-quickstart'
  IfPhysical: !Equals
    - !Ref DeploymentType
    - 'Physical'
  IfVirtual: !Equals
    - !Ref DeploymentType
    - 'Virtual'

Mappings: 
  EC2AMI: 
    us-east-1: 
      ami: ami-0ac80df6eff0e70b5
    us-west-2: 
      ami: ami-003634241a8fcdec0
    eu-west-1: 
      ami: ami-089cc16f7f08c4457
    eu-central-1:
        ami: ami-0d359437d1756caa8

Resources:
  AMCAssetTable:
    Type: 'AWS::DynamoDB::Table'
    Properties: 
      TableName: !Sub '${AWS::StackName}-asset-table'
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
      - AttributeName: 'assetName'
        KeyType: 'HASH'
      AttributeDefinitions:
      - AttributeName: 'assetName'
        AttributeType: 'S'
      - AttributeName: 'change'
        AttributeType: 'S'
      GlobalSecondaryIndexes: 
      - IndexName: "change-index"
        KeySchema: 
          - AttributeName: 'change'
            KeyType: 'HASH'
        Projection: 
          ProjectionType: 'ALL'
  AMCModelTable:
    Type: 'AWS::DynamoDB::Table'
    Properties: 
      TableName: !Sub '${AWS::StackName}-asset-model-table'
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
      - AttributeName: 'assetModelName'
        KeyType: 'HASH'
      AttributeDefinitions:
      - AttributeName: 'assetModelName'
        AttributeType: 'S'
      - AttributeName: 'change'
        AttributeType: 'S'
      - AttributeName: 'parent'
        AttributeType: 'S'
      GlobalSecondaryIndexes:
      - IndexName: 'change-index'
        KeySchema:
        - AttributeName: 'change'
          KeyType: 'HASH'
        Projection: 
          ProjectionType: 'ALL'
      - IndexName: 'parent-index'
        KeySchema:
        - AttributeName: 'parent'
          KeyType: 'HASH'
        Projection: 
          ProjectionType: 'ALL'
  IoTEndpoint:
    DependsOn:
      - IoTEndpointRole
    Type: 'Custom::IoTEndpoint'
    Properties:
      ServiceToken: !GetAtt 'IoTEndpointFunction.Arn'
  IoTEndpointFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-IoTEndpoint'
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt 'IoTEndpointRole.Arn'
      Code:
        ZipFile: | 
          var aws = require("aws-sdk");

          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));

              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                  sendResponse(event, context, "SUCCESS");
                  return;
              }

              const iot = new aws.Iot();
              iot.describeEndpoint({endpointType: "iot:Data-ATS"}, (err, data) => {
              let responseData, responseStatus;
                  if (err) {
                      responseStatus = "FAILED";
                      responseData = { Error: "describeEndpoint call failed" };
                      console.log(responseData.Error + ":\n", err);
                  } else  {
                      responseStatus = "SUCCESS";
                      responseData = { IoTEndpointAddress: data.endpointAddress };
                      console.log('response data: ' + JSON.stringify(responseData));
                  }

                  sendResponse(event, context, responseStatus, responseData);
              });
          };

          // Send response to the pre-signed S3 URL 
          function sendResponse(event, context, responseStatus, responseData) {

              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData
              });

              console.log("RESPONSE BODY:\n", responseBody);

              var https = require("https");
              var url = require("url");

              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };

              console.log("SENDING RESPONSE...\n");

              var request = https.request(options, function(response) {
                  console.log("STATUS: " + response.statusCode);
                  console.log("HEADERS: " + JSON.stringify(response.headers));
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });

              request.on("error", function(error) {
                  console.log("sendResponse Error:" + error);
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });

              // write data to request body
              request.write(responseBody);
              request.end();
          }
                MemorySize: 128
                Timeout: 3
  StackCleanup:
    Type: Custom::StackCleanup
    DependsOn:
      - StackCleanupRole
    Properties:
      ServiceToken: !GetAtt 'StackCleanupFunction.Arn'
      buckets: 
        - !Ref imcs3bucket
        - !Ref DevicesBucketResource
        - !Ref AMCIncomingResource
        - !Ref AMCOutputResource
        - !Ref LambdaZipsBucket
      group_name: !Ref EdgeDeviceID

  StackCleanupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: stack-cleanup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - greengrass:ListGroups
                  - greengrass:ResetDeployments
                  - greengrass:GetGroup
                  - iot:UpdateThingShadow
                  - s3:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - iotsitewise:ListPortals
                  - iotsitewise:ListProjects
                  - iotsitewise:ListDashboards
                  - iotsitewise:DeleteDashboard
                  - iotsitewise:DeleteProject
                  - iotsitewise:ListAccessPolicies
                  - iotsitewise:DeleteAccessPolicies
                  - iotsitewise:DeletePortal
                  - iotsitewise:DescribeAssetModel
                  - iotsitewise:UpdateAssetModel
                  - iotsitewise:DeleteAssetModel
                  - iotsitewise:DescribeAsset
                  - iotsitewise:UpdateAssetProperty
                  - iotsitewise:ListAssets
                  - iotsitewise:ListAssociatedAssets
                  - iotsitewise:DeleteAsset
                  - iotsitewise:DisassociateAssets
                  - sso:DeleteManagedApplicationInstance
                  - quicksight:ListDataSets
                  - quicksight:ListDataSources
                  - quicksight:DeleteDataSet
                  - quicksight:DeleteDataSource
                  - dynamodb:Scan
                Resource: "*"
  StackCleanupFunction:
    DependsOn: 
      - CopyZips
      - AMCAssetTable
      - AMCModelTable
    Type: AWS::Lambda::Function
    Properties:
      Description: Cleans up the required resources to delete the stack.
      Environment:
        Variables:
          stackName:
            Ref: AWS::StackName
          DynamoDB_Asset_Table:
            Ref: AMCAssetTable
          DynamoDB_Model_Table: 
            Ref: AMCModelTable
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      Role: !GetAtt 'StackCleanupRole.Arn'
      Timeout: 900
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/StackCleanup/stackcleanupfunction.zip'
  IoTEndpointRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: lambda-endpoint
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:DescribeEndpoint
                Resource:
                  - '*'
  CopyZips:
    Type: Custom::CopyZips
    DependsOn:
      - CopyZipsRole
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/AssetModelConverter/AssetModelConverter.zip
        - functions/packages/AssetModelIngestion/AssetModelIngestion.zip
        - functions/packages/AssetModelUpdater/AssetModelUpdater.zip
        - functions/packages/GreengrassLambda/GreengrassLambda.zip
        - functions/packages/KinesisProcessor/kinesisprocessor.zip
        - functions/packages/Quicksight/quicksightfunction.zip
        - functions/packages/SitewiseMonitor/sitewisemonitorfunction.zip
        - functions/packages/MQTTDataProcess/mqttdataprocess.js.zip
        - functions/packages/GGDeployer/ggdeployer.zip
        - functions/packages/StackCleanup/stackcleanupfunction.zip
        - scripts/physical-brownfield-all-options.sh
        - scripts/physical-greenfield-option1.sh
        - scripts/physical-greenfield-option2a.sh
        - scripts/physical-greenfield-option2b.sh
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  CopyZipsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination.
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      InlineCode: |
        import json
        import logging
        import threading
        import boto3
        import cfnresponse
        
        
        def copy_objects(source_bucket, dest_bucket, prefix, objects):
            s3 = boto3.client('s3')
            for o in objects:
                key = prefix + o
                copy_source = {
                    'Bucket': source_bucket,
                    'Key': key
                }
                print('copy_source: %s' % copy_source)
                print('dest_bucket = %s'%dest_bucket)
                print('key = %s' %key)
                s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                      Key=key)
        
        
        def delete_objects(bucket, prefix, objects):
            s3 = boto3.client('s3')
            objects = {'Objects': [{'Key': prefix + o} for o in objects]}
            s3.delete_objects(Bucket=bucket, Delete=objects)
        
        
        def timeout(event, context):
            logging.error('Execution is about to time out, sending failure response to CloudFormation')
            cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
        
        
        def handler(event, context):
            # make sure we send a failure to CloudFormation if the function
            # is going to timeout
            timer = threading.Timer((context.get_remaining_time_in_millis()
                      / 1000.00) - 0.5, timeout, args=[event, context])
            timer.start()

            print('Received event: %s' % json.dumps(event))
            status = cfnresponse.SUCCESS
            try:
                source_bucket = event['ResourceProperties']['SourceBucket']
                dest_bucket = event['ResourceProperties']['DestBucket']
                prefix = event['ResourceProperties']['Prefix']
                objects = event['ResourceProperties']['Objects']
                if event['RequestType'] == 'Delete':
                    delete_objects(dest_bucket, prefix, objects)
                else:
                    copy_objects(source_bucket, dest_bucket, prefix, objects)
            except Exception as e:
                logging.error('Exception: %s' % e, exc_info=True)
                status = cfnresponse.FAILED
            finally:
                timer.cancel()
                cfnresponse.send(event, context, status, {}, None)
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []

  LambdaExecRole:
    Type: AWS::IAM::Role
    DependsOn: CopyZips
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - quicksight:*
                  - iotsitewise:*
                  - lambda:*
                  - logs:*
                  - sso:*
                  - iam:PassRole
                Resource: "*"
  quicksight:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      ReservedConcurrentExecutions: 1
      Runtime: python3.8
      Role:
        Fn::GetAtt:
          - LambdaExecRole
          - Arn
      Handler: lambda_function.lambda_handler
      Timeout: 180
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/Quicksight/quicksightfunction.zip'
      Description: Invoke a function during stack creation.
      Environment:
        Variables:
          imcdatabucket:
            Ref: imcs3bucket
          imcmonitorrole:
            Fn::GetAtt:
              - SwMonitorRole
              - Arn
          imcawsaccount:
            Ref: AWS::AccountId
          stackName: 
            Ref: AWS::StackName
  
  quicksightiotruletrigger:
    Type: AWS::IoT::TopicRule
    DependsOn: CopyZips
    Properties:
      TopicRulePayload:
        RuleDisabled: false
        Sql: Select * FROM 'imc/control/quicksight'
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - quicksight
                  - Arn
  quicksightFunctionInvocationPermission:
    Type: AWS::Lambda::Permission
    DependsOn: CopyZips
    Properties:
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:iot:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - :rule/
            - Ref: quicksightiotruletrigger
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - quicksight
          - Arn
      SourceAccount:
        Ref: AWS::AccountId

  sitewisemonitor:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
          - LambdaExecRole
          - Arn
      Handler: lambda_function.lambda_handler
      Timeout: 180
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/SitewiseMonitor/sitewisemonitorfunction.zip'
      Description: Invoke a function during stack creation.
      Environment:
        Variables:
          supportEmail:
            Ref: SitewiseMonitorEmail
          imcdatabucket:
            Ref: imcs3bucket
          imcmonitorrole:
            Fn::GetAtt:
              - SwMonitorRole
              - Arn
          imcawsaccount:
            Ref: AWS::AccountId
          stackName:
            Ref: AWS::StackName
          
  sitewisemonitoriotruletrigger:
    Type: AWS::IoT::TopicRule
    DependsOn: CopyZips
    Properties:
      TopicRulePayload:
        RuleDisabled: false
        Sql: Select * FROM 'imc/control/sitewisemonitor'
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - sitewisemonitor
                  - Arn
  sitewisemonitorFunctionInvocationPermission:
    Type: AWS::Lambda::Permission
    DependsOn: CopyZips
    Properties:
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:iot:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - :rule/
            - Ref: sitewisemonitoriotruletrigger
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - sitewisemonitor
          - Arn
      SourceAccount:
        Ref: AWS::AccountId

  processLambda:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecRole.Arn
      Handler: index.handler
      Timeout: 120
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/KinesisProcessor/kinesisprocessor.zip'
      Description: Invoke a function during stack creation. 

  KinesisDeliveryStream:
    DependsOn:
      - KinesisDeliveryPolicy
      - CopyZips
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref imcs3bucket
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 50
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt processLambda.Arn 
              Type: Lambda
        RoleARN: !GetAtt KinesisRole.Arn

  imcs3bucket:
    Type: AWS::S3::Bucket
    DependsOn: CopyZips

  KinesisRole:
    Type: AWS::IAM::Role
    DependsOn: CopyZips
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  KinesisDeliveryPolicy:
    Type: AWS::IAM::Policy
    DependsOn: CopyZips
    Properties:
      PolicyName: imc_firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
      Roles:
        - !Ref KinesisRole

  DeviceDataRule:
    Type: AWS::IoT::TopicRule
    DependsOn: CopyZips
    Properties:
      TopicRulePayload:
        RuleDisabled: false
        Sql: SELECT * FROM '$aws/sitewise/asset-models/+/assets/+/properties/+'
        Actions:
          - Firehose:
              DeliveryStreamName: !Ref KinesisDeliveryStream
              RoleArn: !Sub '${IoTRuleRole.Arn}'

  IoTRuleRole:
    Type: AWS::IAM::Role
    DependsOn: CopyZips
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: imc_iot_role_policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - firehose:DescribeDeliveryStream
                - firehose:ListDeliveryStreams
                - firehose:PutRecord
                - firehose:PutRecordBatch
              Resource: '*'

  SwMonitorRole:
    Type: AWS::IAM::Role
    DependsOn: CopyZips
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - monitor.iotsitewise.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: imc_iot_role_policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - iotsitewise:*
                - sso-directory:*
                - iam:PassRole
              Resource: "*"
  DevicesBucketResource:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  GGResourceRole:
    Type: AWS::IAM::Role
    DependsOn: CopyZips
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: greengrass.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
              - Action: iot:*
                Effect: Allow
                Resource: "*"
              - Action: iotsitewise:BatchPutAssetPropertyValue
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: GGResourcePolicy
  LambdaExecRoleResource:
    Type: AWS::IAM::Role
    DependsOn: CopyZips
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
              - Action: iot:*
                Effect: Allow
                Resource: "*"
              - Action: greengrass:*
                Effect: Allow
                Resource: "*"
              - Action:
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:GetRole
                  - iam:DeleteRole
                  - iam:PassRole
                Effect: Allow
                Resource: "*"
              - Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:ListStackResources
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - Fn::GetAtt:
                      - DevicesBucketResource
                      - Arn
                  - Fn::Join:
                      - ""
                      - - Fn::GetAtt:
                            - DevicesBucketResource
                            - Arn
                        - /*
            Version: "2012-10-17"
          PolicyName: GGLambdaPolicy
  GreengrassLambdaResource:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/GreengrassLambda/GreengrassLambda.zip'
      Handler: handler.handler
      Role:
        Fn::GetAtt:
          - LambdaExecRoleResource
          - Arn
      Runtime: python3.7
      Environment:
        Variables:
          DevicesBucket: !Ref DevicesBucketResource
      Timeout: 60

  ManageGreengrassDefault:
    Type: Custom::ManageGreengrass
    DependsOn: CopyZips
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - GreengrassLambdaResource
          - Arn
      EventType: ManageGreengrass
      StackName:
        Ref: AWS::StackName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  EdgeGroupThingCoreDefault:
    Type: Custom::IoTThing
    DependsOn: CopyZips
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - GreengrassLambdaResource
          - Arn
      StackName:
        Ref: AWS::StackName
      EventType: CreateIoTThing
      ThingName:
        Fn::Join:
          - ""
          - - Fn::Sub: ${EdgeDeviceID}
            - Core
      GatewayID:
        Fn::Sub: ${EdgeDeviceID}
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  EdgeGroupThingDeviceDefault:
    Type: Custom::IoTThing
    DependsOn: CopyZips
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - GreengrassLambdaResource
          - Arn
      StackName:
        Ref: AWS::StackName
      EventType: CreateIoTThing
      ThingName:
        Fn::Join:
          - ""
          - - Fn::Sub: ${EdgeDeviceID}
            - Device
      GatewayID:
        Fn::Sub: ${EdgeDeviceID}
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  EdgeGroupFuncDef:
    Type: AWS::Greengrass::FunctionDefinition
    DependsOn: CopyZips
    Properties:
      Name:
        Fn::Join:
          - ""
          - - Fn::Sub: ${EdgeDeviceID}
            - FuncDef,
  EdgeGroupFuncDefVersion:
    Type: AWS::Greengrass::FunctionDefinitionVersion
    DependsOn: CopyZips
    Properties:
      FunctionDefinitionId:
        Fn::GetAtt:
          - EdgeGroupFuncDef
          - Id
      Functions: []
      DefaultConfig:
        Execution:
          IsolationMode: NoContainer
  EdgeGroupSubDef:
    Type: AWS::Greengrass::SubscriptionDefinition
    DependsOn: CopyZips
    Properties:
      Name:
        Fn::Join:
          - ""
          - - Fn::Sub: ${EdgeDeviceID}
            - SubDef
  EdgeGroupSubDefVersion:
    Type: AWS::Greengrass::SubscriptionDefinitionVersion
    DependsOn: CopyZips
    Properties:
      SubscriptionDefinitionId:
        Fn::GetAtt:
          - EdgeGroupSubDef
          - Id
      Subscriptions:
        - Id: DeviceToIoTCore
          Source:
            Fn::GetAtt:
              - EdgeGroupThingDeviceDefault
              - thingArn
          Subject: "#"
          Target: cloud
  EdgeGroupConDef:
    Type: AWS::Greengrass::ConnectorDefinition
    DependsOn: CopyZips
    Properties:
      Name:
        Fn::Join:
          - ""
          - - Fn::Sub: ${EdgeDeviceID}
            - ConDef
  EdgeGroupConDefVersion:
    Type: AWS::Greengrass::ConnectorDefinitionVersion
    DependsOn: CopyZips
    Properties:
      ConnectorDefinitionId:
        Fn::GetAtt:
          - EdgeGroupConDef
          - Id
      Connectors:
        - ConnectorArn: arn:aws:greengrass:us-east-1::/connectors/IoTSiteWise/versions/5
          Id: SiteWiseConnector
  EdgeGroupCoreDef:
    Type: AWS::Greengrass::CoreDefinition
    DependsOn: CopyZips
    Properties:
      Name: EdgeGroupCoreDef
  EdgeGroupCoreDefVersion:
    Type: AWS::Greengrass::CoreDefinitionVersion
    DependsOn: CopyZips
    Properties:
      CoreDefinitionId:
        Fn::GetAtt:
          - EdgeGroupCoreDef
          - Id
      Cores:
        - CertificateArn:
            Fn::GetAtt:
              - EdgeGroupThingCoreDefault
              - certificateArn
          Id: EdgeGroupCoreDefCore
          ThingArn:
            Fn::GetAtt:
              - EdgeGroupThingCoreDefault
              - thingArn
  EdgeGroupDeviceDef:
    Type: AWS::Greengrass::DeviceDefinition
    DependsOn: CopyZips
    Properties:
      Name: EdgeGroupDeviceDef
      InitialVersion:
        Devices:
          - CertificateArn:
              Fn::GetAtt:
                - EdgeGroupThingDeviceDefault
                - certificateArn
            Id: EdgeGroupDeviceDefDevice
            ThingArn:
              Fn::GetAtt:
                - EdgeGroupThingDeviceDefault
                - thingArn
  EdgeGroupLoggerDef:
    Type: 'AWS::Greengrass::LoggerDefinition'
    Properties:
      Name: EdgeGroupLoggerDef
  EdgeGroupLoggerDefVersion:
    Type: 'AWS::Greengrass::LoggerDefinitionVersion'
    Properties:
      LoggerDefinitionId: !Ref EdgeGroupLoggerDef
      Loggers:
        - Id: EdgeGroupLoggerDefVersion
          Type: FileSystem
          Component: GreengrassSystem
          Level: DEBUG
          Space: '128'
  EdgeGroup:
    Type: AWS::Greengrass::Group
    DependsOn: CopyZips
    Properties:
      Name:
        Fn::Sub: ${EdgeDeviceID}
      RoleArn:
        Fn::GetAtt:
          - GGResourceRole
          - Arn
  EdgeGroupVersion:
    Type: AWS::Greengrass::GroupVersion
    DependsOn: CopyZips
    Properties:
      GroupId:
        Fn::GetAtt:
          - EdgeGroup
          - Id
      ConnectorDefinitionVersionArn:
        Ref: EdgeGroupConDefVersion
      CoreDefinitionVersionArn:
        Ref: EdgeGroupCoreDefVersion
      DeviceDefinitionVersionArn:
        Fn::GetAtt:
          - EdgeGroupDeviceDef
          - LatestVersionArn
      FunctionDefinitionVersionArn:
        Ref: EdgeGroupFuncDefVersion
      SubscriptionDefinitionVersionArn:
        Ref: EdgeGroupSubDefVersion
      LoggerDefinitionVersionArn:
        Ref: EdgeGroupLoggerDefVersion

  AMCIncomingResource:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  AMCOutputResource:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  AMCLambdaRole:
    Type: AWS::IAM::Role
    DependsOn: CopyZips
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
              - Action:
                  - iot:Publish
                  - iotsitewise:DescribeAssetModel
                  - iotsitewise:CreateAssetModel
                  - iotsitewise:ListAssetModels
                  - iotsitewise:UpdateAssetModel
                  - iotsitewise:DeleteAssetModel
                  - iotsitewise:CreateAsset
                  - iotsitewise:DescribeAsset
                  - iotsitewise:UpdateAssetProperty
                  - iotsitewise:ListAssets
                  - iotsitewise:ListAssociatedAssets
                  - iotsitewise:DeleteAsset
                  - iotsitewise:DisassociateAssets
                  - iotsitewise:AssociateAssets
                  - iotsitewise:ListGateways
                  - iotsitewise:DescribeGateway
                  - iotsitewise:DescribeGatewayCapabilityConfiguration
                  - iotsitewise:UpdateGatewayCapabilityConfiguration
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:GetItem
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:PutObject
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - Fn::GetAtt:
                      - AMCIncomingResource
                      - Arn
                  - Fn::Join:
                      - ""
                      - - Fn::GetAtt:
                            - AMCIncomingResource
                            - Arn
                        - "*"
                  - Fn::GetAtt:
                      - AMCOutputResource
                      - Arn
                  - Fn::Join:
                      - ""
                      - - Fn::GetAtt:
                            - AMCOutputResource
                            - Arn
                        - "*"
            Version: "2012-10-17"
          PolicyName: AMCLambdaPolicy

  # Asset Model Ingestion
  AssetModelIngestionLambdaResource:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/AssetModelIngestion/AssetModelIngestion.zip'
      Handler: assetModelIngestion.handler
      Role:
        Fn::GetAtt:
          - AMCLambdaRole
          - Arn
      Runtime: python3.7
      Environment:
        Variables:
          IncomingBucket:
            Ref: AMCIncomingResource
      Timeout: 900

  AssetModelIngestionLambdaIngestionDBirthRulePermission:
    Type: AWS::Lambda::Permission
    DependsOn: CopyZips
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - AssetModelIngestionLambdaResource
          - Arn
      Principal: iot.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - IngestionDBirthRule
          - Arn

  AssetModelIngestionLambdaIngestionNBirthRulePermission:
    Type: AWS::Lambda::Permission
    DependsOn: CopyZips
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - AssetModelIngestionLambdaResource
          - Arn
      Principal: iot.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - IngestionNBirthRule
          - Arn

  IngestionDBirthRule:
    Type: AWS::IoT::TopicRule
    DependsOn: CopyZips
    Properties:
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - AssetModelIngestionLambdaResource
                  - Arn
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: false
        Sql: SELECT *, topic() as topic FROM 'spBv1.0/+/DBIRTH/#'

  IngestionNBirthRule:
    Type: AWS::IoT::TopicRule
    DependsOn: CopyZips
    Properties:
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - AssetModelIngestionLambdaResource
                  - Arn
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: false
        Sql: SELECT *, topic() as topic FROM 'spBv1.0/+/NBIRTH/#'

  # Asset Model Converter
  AssetModelConverterLambdaResource:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      ReservedConcurrentExecutions: 1
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/AssetModelConverter/AssetModelConverter.zip'
      Handler: assetModelConverter.handler
      Role:
        Fn::GetAtt:
          - AMCLambdaRole
          - Arn
      Runtime: python3.7
      Environment:
        Variables:
          IncomingBucket:
            Ref: AMCIncomingResource
          DynamoDB_Model_Table:
            Ref: AMCModelTable
          DynamoDB_Asset_Table:
            Ref: AMCAssetTable
          DriverName:
            Ref: AMCDriver
      Timeout: 900

  # Asset Model Updater
  AssetModelUpdaterLambdaResource:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      ReservedConcurrentExecutions: 1
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/AssetModelUpdater/AssetModelUpdater.zip'
      Handler: assetModelUpdater.handler
      Role:
        Fn::GetAtt:
          - AMCLambdaRole
          - Arn
      Runtime: python3.7
      Environment:
        Variables:
          DynamoDB_Model_Table:
            Ref: AMCModelTable
          DynamoDB_Asset_Table:
            Ref: AMCAssetTable
          greengrassGroupID: 
            !GetAtt EdgeGroup.Id
          gatewayName:
            Ref: EdgeDeviceID
      Timeout: 900

  AssetModelUpdaterRule:
    Type: AWS::IoT::TopicRule
    DependsOn: CopyZips
    Properties:
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - AssetModelUpdaterLambdaResource
                  - Arn
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: false
        Sql: SELECT * FROM 'imc/control/amcupdate'

  AssetModelUpdaterRulePermission:
    Type: AWS::Lambda::Permission
    DependsOn: CopyZips
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - AssetModelUpdaterLambdaResource
          - Arn
      Principal: iot.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - AssetModelUpdaterRule
          - Arn


  ApiHandlerRole:
    Type: AWS::IAM::Role
    DependsOn: CopyZips
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
        PolicyName: ApiHandlerRolePolicy
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: EDGE
      StageName: api
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '1.0'
          title: ggdeployer
        schemes:
        - https
        paths:
          /:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /deployggwithsitewise/{groupname}:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              parameters:
              - name: groupname
                in: path
                required: true
                type: string
          /deploygg/{groupname}:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              parameters:
              - name: groupname
                in: path
                required: true
                type: string
          /updateconnectivity/{group_name}/withip/{core_ip}:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              parameters:
              - name: group_name
                in: path
                required: true
                type: string
              - name: core_ip
                in: path
                required: true
                type: string
        definitions:
          Empty:
            type: object
            title: Empty Schema
        x-amazon-apigateway-binary-media-types:
        - application/octet-stream
        - application/x-tar
        - application/zip
        - audio/basic
        - audio/ogg
        - audio/mp4
        - audio/mpeg
        - audio/wav
        - audio/webm
        - image/png
        - image/jpg
        - image/jpeg
        - image/gif
        - video/ogg
        - video/mpeg
        - video/webm
  APIHandler:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Handler: app.app
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/GGDeployer/ggdeployer.zip'
      Timeout: 60
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ApiHandlerRole
        - Arn
  APIHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: APIHandler
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
        - RestAPIId:
            Ref: RestAPI


  Ec2RoleResource:
    Type: AWS::IAM::Role
    DependsOn: CopyZips
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: s3:GetObject
                Effect: Allow
                Resource: 
                  - !Sub 'arn:aws:s3:::${DevicesBucketResource}*'
            Version: "2012-10-17"
          PolicyName: Ec2S3Access
  EdgeSecurityGroupResource:
    Type: AWS::EC2::SecurityGroup
    DependsOn: CopyZips
    Properties:
      GroupDescription: VirtualOption1/EdgeSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: !Sub ${UserPublicIP}/32
          Description: Allow user ssh access
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: !Sub ${UserPublicIP}/32
          Description: Allow world Ignition UI access
          FromPort: 8088
          IpProtocol: tcp
          ToPort: 8088
        - CidrIp: !Ref PublicSubnet1CIDR
          Description: Allow world MQTT GG Access
          FromPort: 8883
          IpProtocol: tcp
          ToPort: 8883
        - CidrIp: !Ref PublicSubnet1CIDR
          Description: Allow Ignition API access
          FromPort: 62541
          IpProtocol: tcp
          ToPort: 62541
      VpcId: !Ref 'VpcId'
  EdgeInstanceGreengrassInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: CopyZips
    Properties:
      Roles:
        - Ref: Ec2RoleResource
  EdgeInstanceIgnitionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: CopyZips
    Properties:
      Roles:
        - Ref: Ec2RoleResource

  Virtual:
    Type: 'AWS::CloudFormation::Stack'
    Condition: IfVirtual
    DependsOn:
      - Ec2RoleResource
      - CopyZips
      - KinesisDeliveryPolicy
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/${DeploymentType}${DeploymentOption}.template.yaml
        - S3Bucket: !If
            - UsingDefaultBucket
            - !Sub 'aws-quickstart-${AWS::Region}'
            - !Ref 'QSS3BucketName'
          S3Region: !If
            - UsingDefaultBucket
            - !Ref 'AWS::Region'
            - !Ref 'QSS3BucketRegion'
      Parameters:
        AZ: !Ref AZ 
        EC2Subnet: !Ref EC2Subnet
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        EdgeDeviceID: !Ref EdgeDeviceID
        DeploymentType: !Ref DeploymentType
        DeploymentOption: !Ref DeploymentOption
        EC2KeyPairName: !Ref EC2KeyPairName
        IgnitionInstanceType: !Ref IgnitionInstanceType
        EC2AMI: !FindInMap [EC2AMI, !Ref "AWS::Region", ami]
        EIIgnitionInstanceProfile: !Ref EdgeInstanceIgnitionInstanceProfile
        EdgeSecGroupResourceGroupID: !GetAtt EdgeSecurityGroupResource.GroupId
        DeviceBucketRes: !Ref DevicesBucketResource
        LambdaZipsBucket: !Ref LambdaZipsBucket
        LambdaExecRole: !GetAtt LambdaExecRole.Arn
        IMCBucketArn: !GetAtt imcs3bucket.Arn 
        KinesisDelRoleArn: !GetAtt KinesisRole.Arn
        IoTTopicRuleRoleArn: !GetAtt IoTRuleRole.Arn
        AMCIncomingRes: !Ref AMCIncomingResource
        AMCIncomingResArn: !GetAtt AMCIncomingResource.Arn
        AMCConvertLambdaResArn: !GetAtt AssetModelConverterLambdaResource.Arn
        RestAPIId: !Ref RestAPI
        IoTEndpoint: !GetAtt IoTEndpoint.IoTEndpointAddress
        EdgeInstanceGreengrassInstanceProfile: !Ref EdgeInstanceGreengrassInstanceProfile
        GreengrassInstanceType: !Ref GreengrassInstanceType
  Physical:
    Type: 'AWS::CloudFormation::Stack'
    Condition: IfPhysical
    DependsOn:
      - Ec2RoleResource
      - CopyZips
      - KinesisDeliveryPolicy
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/Physical.template.yaml
        - S3Bucket: !If
            - UsingDefaultBucket
            - !Sub 'aws-quickstart-${AWS::Region}'
            - !Ref 'QSS3BucketName'
          S3Region: !If
            - UsingDefaultBucket
            - !Ref 'AWS::Region'
            - !Ref 'QSS3BucketRegion'
      Parameters:
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        EdgeDeviceID: !Ref EdgeDeviceID
        DeviceBucketRes: !Ref DevicesBucketResource
        LambdaZipsBucket: !Ref LambdaZipsBucket
        LambdaExecRole: !GetAtt LambdaExecRole.Arn
        IMCBucketArn: !GetAtt imcs3bucket.Arn 
        KinesisDelRoleArn: !GetAtt KinesisRole.Arn
        IoTTopicRuleRoleArn: !GetAtt IoTRuleRole.Arn
        AMCIncomingRes: !Ref AMCIncomingResource
        AMCIncomingResArn: !GetAtt AMCIncomingResource.Arn
        AMCConvertLambdaResArn: !GetAtt AssetModelConverterLambdaResource.Arn
        RestAPIId: !Ref RestAPI
        IoTEndpoint: !GetAtt IoTEndpoint.IoTEndpointAddress

Outputs:
  IgnitionURL:
    Condition: IfVirtual
    Value: !GetAtt 'Virtual.Outputs.IgnitionURL'
  DependenciesBucket:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.DependenciesBucket'
  BootupScriptGreenfieldOption1:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.BootupScriptGreenfieldOption1'
  BootupScriptGreenfieldOption2a:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.BootupScriptGreenfieldOption2a'
  BootupScriptGreenfieldOption2b:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.BootupScriptGreenfieldOption2b'
  BootupScriptBrownfieldAllOptions:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.BootupScriptBrownfieldAllOptions'
  DeviceBucket:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.DeviceBucket'
  DeviceKeyGreengrass:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.DeviceKeyGreengrass'
  DeviceKeyAwareDevice:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.DeviceKeyAwareDevice'
  RestAPIId:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.RestAPIId'
  Region:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.Region'
  EdgeDeviceID:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.EdgeDeviceID'
  IoTEndpoint:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.IoTEndpoint'
  FullScriptParamsGreenfield1and2a:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.FullScriptParamsGreenfield1and2a'
  FullScriptParamsGreenfield2b:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.FullScriptParamsGreenfield2b'
  FullScriptParamsBrownField:
    Condition: IfPhysical
    Value: !GetAtt 'Physical.Outputs.FullScriptParamsBrownField'
